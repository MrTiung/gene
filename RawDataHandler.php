<?php

/**
 * Created by PhpStorm.
 * User: zpldsg
 * Date: 2017/8/10
 * Time: 13:52
 */

require_once 'snp.php';


class RawDataHandler
{
    private $data;
    private $filename;
    private $gender;



    function __construct($fp,$filename="default",$format='default')
    {
        if($format=='default'){
            $this->common_construct($fp,$filename);
        }
        if($format=='wang'){
            $this->wang_construct($fp,$filename);
        }
    }

    function common_construct($fp,$filename="default",$gender='female'){
        $this->filename=$filename;
        $this->gender=$gender;
        while (!feof($fp)) {
            $line = trim(fgetss($fp));
            if (preg_match("/^(\\S*)\\s(\\d+|X|Y|MT)\\s(\\d*)\\s([ATCGDI]{1,2})$/", $line, $arr)) {
                $snp = new Snp();
                $snp->setRsid(trim($arr[1]));
                $snp->setChromosome(trim($arr[2]));
                $snp->setPosition(trim($arr[3]));
                $genotype=trim($arr[4]);
                if($snp->getChromosome()=='MT') {
                    $genotype = substr($genotype, 0, 1);
                }
                if($this->gender!='male'&& $snp->getChromosome()=="Y"){
                    $this->gender='male';
                }
                $snp->setGenotype($genotype);
                $this->data[$snp->getChromosome().'_'.$snp->getPosition()] = $snp;
            }
        }
        if($this->gender=='male'){
            array_walk($this->data,"format_sex_ch");
        }
        echo 'read total ' .sizeof($this->data) . ' snp<br/>';
    }

    function wang_construct($fp,$filename="default",$gender='female'){
        $this->filename=$filename;
        $this->gender=$gender;
        while (!feof($fp)) {
            $line = trim(fgetss($fp));
            if (preg_match("/^(\\S*)\\s(\\S*)\\s([ATCGDI]{1,2})$/", $line, $arr)) {
                $snp = new Snp();
                $snp->setRsid(trim($arr[2]));
                $genotype=trim(trim($arr[3]));
                if($snp->getChromosome()=='MT') {
                    $genotype = substr($genotype, 0, 1);
                }
                if($this->gender!='male'&& $snp->getChromosome()=="Y"){
                    $this->gender='male';
                }
                $snp->setGenotype($genotype);
                $this->data[$snp->getRsid()] = $snp;
            }
        }
        if($this->gender=='male'){
            array_walk($this->data,"format_sex_ch");
        }
        echo 'read total ' .sizeof($this->data) . ' snp<br/>';
    }

    /**
     * @return mixed
     */
    public function getData()
    {
        return $this->data;
    }

    function outPutRawData($snpList,$fileHeader){
        $filename=$this->filename.'_at_'.date("Y_M_j_H_i_s").".txt";
        $new=fopen($filename,'wb');
        fwrite($new,$fileHeader."\r\n");
        fclose($new);
        $total=0;
        while(!feof($snpList)){
            $outData="";
            $count=0;
            while($count<5000&&!feof($snpList)){
                $curLine=explode("\t",trim(fgetss($snpList)));
                if(sizeof($curLine)>1) {
                    $rsid = $curLine[0];
                    $key = $curLine[1] . '_' . $curLine[2];
                    if (array_key_exists($key, $this->data)) {
                        $lineData = $this->data[$key];
                        $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t".($lineData->getGenotype())."\r\n";
                        $total++;
                    } else {
                        if($this->gender == 'female' && $curLine[1] == 'Y'){
                            continue;
                        }
                        $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t--\r\n";
                    }
                    $count++;
                }
            }
            $new=fopen($filename,'ab');
            fwrite($new,$outData);
            fclose($new);
        }
        echo 'match total '.$total.' snp</br>';
    }

    function outPutAncestry($snpList){
        $fileHeader='#AncestryDNA raw data download
#This file was generated by AncestryDNA at: 08/08/2017 12:09:31 UTC
#Data was collected using AncestryDNA array version: V2.0
#Data is formatted using AncestryDNA converter version: V1.0
#Below is a text version of your DNA file from Ancestry.com DNA, LLC.  THIS
#INFORMATION IS FOR YOUR PERSONAL USE AND IS INTENDED FOR GENEALOGICAL RESEARCH
#ONLY.  IT IS NOT INTENDED FOR MEDICAL, DIAGNOSTIC, OR HEALTH PURPOSES.  THE EXPORTED DATA IS
#SUBJECT TO THE AncestryDNA TERMS AND CONDITIONS, BUT PLEASE BE AWARE THAT THE
#DOWNLOADED DATA WILL NO LONGER BE PROTECTED BY OUR SECURITY MEASURES.
#WHEN YOU DOWNLOAD YOUR RAW DNA DATA, YOU ASSUME ALL RISK OF STORING,
#SECURING AND PROTECTING YOUR DATA.  FOR MORE INFORMATION, SEE ANCESTRYDNA FAQS.
#
#Genetic data is provided below as five TAB delimited columns.  Each line
#corresponds to a SNP.  Column one provides the SNP identifier (rsID where
#possible).  Columns two and three contain the chromosome and basepair position
#of the SNP using human reference build 37.1 coordinates.  Columns four and five
#contain the two alleles observed at this SNP (genotype).  The genotype is reported
#on the forward (+) strand with respect to the human reference.
rsid	chromosome	position	allele1	allele2
';
        $filename=$this->filename.'_at_'.date("Y_M_j_H_i_s").".txt";
        $new=fopen($filename,'wb');
        fwrite($new,$fileHeader."\r\n");
        fclose($new);
        $total=0;
        while(!feof($snpList)){
            $outData="";
            $count=0;
            while($count<5000&&!feof($snpList)){
                $curLine=explode("\t",trim(fgetss($snpList)));
                if(sizeof($curLine)>1) {
                    $rsid = $curLine[0];
                    $key = $curLine[1] . '_' . $curLine[2];
                    if (array_key_exists($key, $this->data)) {
                        $lineData = $this->data[$key];
                        $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t".($lineData->getGenotype())."\r\n";
                        $total++;
                    } else {
                        if($this->gender == 'female' && $curLine[1] == 'Y'){
                            continue;
                        }
                        $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t--\r\n";
                    }
                    $count++;
                }
            }
            $new=fopen($filename,'ab');
            fwrite($new,$outData);
            fclose($new);
        }
        echo 'match total '.$total.' snp</br>';
    }

    function outputSameSnp($snpList){
        $filename=$this->filename.'_at_'.date("Y_M_j_H_i_s").".txt";
        $total=0;
        $sum=0;
        $empty=0;
        while(!feof($snpList)){
            $outData="";
            $count=0;
            while($count<5000&&!feof($snpList)){
                $curLine=explode("\t",trim(fgetss($snpList)));
                if(sizeof($curLine)>1) {
                    $rsid = $curLine[0];
                    $key = $curLine[1] . '_' . $curLine[2];
                    if (array_key_exists($key, $this->data)) {
                        if($curLine[3]=='--'){
                            $empty++;
                            continue;
                        }
                        $lineData = $this->data[$key];
                        if(strlen($lineData->getGenotype())==1){
                            $genotype=$lineData->getGenotype().$lineData->getGenotype();
                        }else{
                            $genotype=$lineData->getGenotype();
                        }

                        if($genotype==$curLine[3]||strrev($genotype)==$curLine[3]){
                            $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t".($lineData->getGenotype())."\r\n";
                            $sum++;
                        }else{
//                            $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t".($lineData->getGenotype())."\r\n";
//                            $sum++;
                        }
                        $total++;
                    }
                    $count++;
                }
            }
            $new=fopen($filename,'ab');
            fwrite($new,$outData);
            fclose($new);
        }
        echo 'match total '.$total.' snp</br>';
        echo 'same total '.$sum.' snp</br>';
        echo 'empty total '.$empty.' snp</br>';
    }

    function outputSameSnp2($snpList){
        $filename=$this->filename.'_at_'.date("Y_M_j_H_i_s").".txt";
        $total=0;
        $sum=0;
        $empty=0;
        while(!feof($snpList)){
            $outData="";
            $count=0;
            while($count<5000&&!feof($snpList)){
                $curLine=explode("\t",trim(fgetss($snpList)));
                if(sizeof($curLine)>1) {
                    $rsid = $curLine[0];
                    $key = $rsid;
                    if (array_key_exists($key, $this->data)) {
                        if($curLine[3]=='--'){
                            $empty++;
                        }
                        $lineData = $this->data[$key];
                        if(strlen($lineData->getGenotype())==1){
                            $genotype=$lineData->getGenotype().$lineData->getGenotype();
                        }else{
                            $genotype=$lineData->getGenotype();
                        }

                        if($genotype==$curLine[3]||strrev($genotype)==$curLine[3]){
//                            $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t".($lineData->getGenotype())."\r\n";
//                            $sum++;
                        }else{
                            $outData = "$outData$rsid\t" . $curLine[1] . "\t" . $curLine[2] . "\t".($lineData->getGenotype())."\r\n";
                            $sum++;
                        }
                        $total++;
                    }
                    $count++;
                }
            }
            $new=fopen($filename,'ab');
            fwrite($new,$outData);
            fclose($new);
        }
        echo 'match total '.$total.' snp</br>';
        echo 'same total '.$sum.' snp</br>';
        echo 'empty total '.$empty.' snp</br>';
    }

    function clearMore($snpList){
        while(!feof($snpList)){
            $curLine=explode("\t",trim(fgetss($snpList)));
            if(sizeof($curLine)>1) {
                $key = $curLine[1] . '_' . $curLine[2];
                if (array_key_exists($key, $this->data)) {
                    unset($this->data[$key]);
                }
            }
        }
    }
}



function format_sex_ch(Snp $snp){
    if($snp->getChromosome()=='X'||$snp->getChromosome()=='Y'){
        $snp->setGenotype(substr($snp->getGenotype(), 0, 1));
    }
}
